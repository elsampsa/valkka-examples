

In this lesson, we are receiving frames from an IP camera using LiveThread and recast those frames to a multicast address using another LiveThread. The filterchain looks like this:

:: 

  (LiveThread:livethread) --> {InfoFrameFilter:info_filter) -->> (LiveThread:livethread2) 
  
Let's start by importing Valkka:

.. code:: python

    import time
    from valkka.core import *
    

Live555's default output packet buffer size might be too small, so let's make it bigger before instantiating any LiveThreads:

.. code:: python

    setLiveOutPacketBuffermaxSize(95000)
    

Construct the filtergraph from end-to-beginning:

.. code:: python

    livethread2    =LiveThread("livethread2")
    live_in_filter =livethread2.getFrameFilter()
    info_filter    =InfoFrameFilter("info_filter",live_in_filter)
    livethread     =LiveThread("livethread")
    

Start threads

.. code:: python

    livethread2.startCall()
    livethread. startCall()
    

Define stream source: incoming frames from IP camera 192.168.1.41 are tagged with slot number "2" and they are written to "info_filter":

.. code:: python

    ctx     =LiveConnectionContext(LiveConnectionType_rtsp, "rtsp://admin:nordic12345@192.168.1.41", 2, info_filter)
    

Define stream sink: all outgoing frames with slot number "2" are sent to port 50000:

.. code:: python

    out_ctx =LiveOutboundContext(LiveConnectionType_sdp, "224.1.168.91", 2, 50000)
    

Start playing:

.. code:: python

    livethread2.registerOutboundCall(out_ctx)
    livethread. registerStreamCall(ctx)
    livethread. playStreamCall(ctx)
    

Stream and recast to multicast for a while:

.. code:: python

    time.sleep(60)
    
    livethread. stopStreamCall(ctx)
    livethread. deregisterStreamCall(ctx)
    livethread2.deregisterOutboundCall(out_ctx)
    

Stop threads in beginning-to-end order

.. code:: python

    livethread. stopCall();
    livethread2.stopCall();
    
    print("bye")
    
